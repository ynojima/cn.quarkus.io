<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

    <channel>
        <title>Quarkus</title>
        <link>https://quarkus.io</link>
        <description>Quarkus: Supersonic Subatomic Java</description>
        <lastBuildDate>Sun, 24 Dec 2023 08:30:17 +0000</lastBuildDate>
        
        <item>
            <title>Quarkus 3.6.4 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-6-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.6.4, our fourth maintenance release for the 3.6 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.6.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.6.4, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To migrate from 3.5, please refer to &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;our migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;3.4&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;3.5&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.6.4&quot;&gt;the full changelog of 3.6.4 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-6-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Release Plans for Quarkus 3.7, 3.8 and 3.9</title>
            <link>
                https://quarkus.io/blog/our-plans-for-quarkus-3-7-3-8-3-9-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.2 was the first LTS (Long Term Support) release of Quarkus,
and we learned a lot from it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Choosing which version will be an LTS version is crucial,
as people expect predictability and stability from the LTS versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thus why we came up with a plan for our next minor releases,
including the next LTS version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.8 will be our next LTS release.
It will be the direct continuation of the &lt;code&gt;3.7&lt;/code&gt; branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you contribute to Quarkus or the Quarkus Platform and need a feature in the next Quarkus LTS,
make sure it has been merged in the &lt;a href=&quot;https://github.com/quarkusio/quarkus&quot;&gt;Quarkus repository&lt;/a&gt; before January 16th included
(the day before the &lt;code&gt;3.7.0.CR1&lt;/code&gt; release).&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-3-7&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-3-7&quot;&gt;&lt;/a&gt;Quarkus 3.7&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.7 will be released on January 31st.
It will contain new features, as usual for our minor releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As previously announced, the minimum Java version for Quarkus 3.7 will be Java 17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CR1 is planned for January 17th so all the new features need to be merged by then.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See our &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Release-Planning&quot;&gt;release schedule&lt;/a&gt; for all the details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There will be a slight change though: from January 17th and the build of &lt;code&gt;3.7.0.CR1&lt;/code&gt;, our &lt;code&gt;main&lt;/code&gt; branch will target 3.9 development
(yes, you read it correctly, it will target 3.9).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-3-8&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-3-8&quot;&gt;&lt;/a&gt;Quarkus 3.8&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might ask &quot;where has Quarkus 3.8 gone?&quot;.
Thanks for asking!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.8 will be our next LTS version.
It will be released at the end of February
(our current plan is to release it on February 28th, but things might be refined as we approach the release date).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release will be the continuation of the 3.7 cycle and will be started from the &lt;code&gt;3.7&lt;/code&gt; branch.
The focus will be on hardening 3.7 and fixing bugs.
It won&amp;#8217;t contain any new features.
It might contain some additional component upgrades to fix CVEs or important bugs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Consequently, and this is important:
if you contribute to Quarkus or the Quarkus Platform and need a feature in the next Quarkus LTS,
make sure it has been merged in the &lt;a href=&quot;https://github.com/quarkusio/quarkus&quot;&gt;Quarkus repository&lt;/a&gt; before January 16th included
(the day before the &lt;code&gt;3.7.0.CR1&lt;/code&gt; release).&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-3-9&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-3-9&quot;&gt;&lt;/a&gt;Quarkus 3.9&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.9 will be released at the end of March.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will be packed with new features as it will contain 2 months of work,
whereas our usual minors contain 1 month of work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;questions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#questions&quot;&gt;&lt;/a&gt;Questions?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions about this plan, feel free to ask in the comments of this blog post or on &lt;a href=&quot;https://github.com/quarkusio/quarkus/discussions/categories/community&quot;&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 19 Dec 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/our-plans-for-quarkus-3-7-3-8-3-9-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Containerizing virtual thread applications</title>
            <link>
                https://quarkus.io/blog/virtual-threads-6/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In another &lt;a href=&quot;https://quarkus.io/blog/virtual-threads-2/&quot;&gt;blog post&lt;/a&gt;, we explored how to implement a CRUD application with Quarkus to harness the power of virtual threads.
This post continues from that point, explaining how to containerize the application.
Containerization involves packaging the application into a container image, and we&amp;#8217;ll use the &lt;code&gt;quarkus-container-image-jib&lt;/code&gt; extension for this purpose.
Quarkus offers other extensions for containerization, such as &lt;code&gt;quarkus-container-image-docker&lt;/code&gt;, so choose the one that suits your preference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Packaging an application using virtual threads is not different from packaging a regular application.
Quarkus hides all the complexity, selecting the right base image and configuring the native image build process to use the right flags.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full code for this blog post is available in the &lt;code&gt;crud-example&lt;/code&gt; directory of the &lt;a href=&quot;https://github.com/quarkusio/virtual-threads-demos&quot;&gt;virtual-threads-demos GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;adding-jib-to-the-project&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#adding-jib-to-the-project&quot;&gt;&lt;/a&gt;Adding Jib to the Project&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, add the &lt;code&gt;quarkus-container-image-jib&lt;/code&gt; extension to the project:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;quarkus-container-image-jib&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, open the &lt;code&gt;application.properties&lt;/code&gt; file and add the following properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.container-image.build=true &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
quarkus.container-image.name=virtual-threads-demos-${quarkus.application.name} &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Enable container image build; every &lt;code&gt;mvn package&lt;/code&gt; run will build a container image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define the name of the container image. The &lt;code&gt;${quarkus.application.name}&lt;/code&gt; placeholder is replaced by the application name, which is &lt;code&gt;crud-example&lt;/code&gt; in our case.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;building-the-container-image-for-the-jvm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#building-the-container-image-for-the-jvm&quot;&gt;&lt;/a&gt;Building the Container Image for the JVM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create the container image for the Java application, run the following command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;$ mvn clean package&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The logs will show the container image build process, with the image being built using the &lt;code&gt;registry.access.redhat.com/ubi8/openjdk-21-runtime:1.18&lt;/code&gt; base image.
This image is automatically selected by Quarkus as the project uses Java 21.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Take note of the resulting image name: &lt;code&gt;clement/virtual-threads-demos-crud-example:1.0.0-SNAPSHOT&lt;/code&gt;. The first part is your username by default, do do not forget to change it in the other commands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can run the container image with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;$ docker run -it \
  -p8080:8080 \
  -e QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://docker.for.mac.localhost/rest-crud \
  clement/virtual-threads-demos-crud-example:1.0.0-SNAPSHOT&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensure to replace &lt;code&gt;clement&lt;/code&gt; with your username.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you are running on ARM64, you may encounter a warning regarding the image&amp;#8217;s platform mismatch.
You can override this using: &lt;code&gt;$ mvn clean package -DskipTests -Dquarkus.jib.platforms=linuxarm64&lt;/code&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;building-the-container-image-for-the-native-executable&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#building-the-container-image-for-the-native-executable&quot;&gt;&lt;/a&gt;Building the Container Image for the Native Executable&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To build the container image for the native executable, use the following command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;$ mvn package -DskipTests \
  -Dnative \
  -Dquarkus.native.container-build=true \
  -Dquarkus.jib.platforms=linux/arm64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;-Dnative&lt;/code&gt; flag enables native compilation, and &lt;code&gt;-Dquarkus.jib.platforms=linux/arm64&lt;/code&gt; specifies the target platform (required if you are on ARM64, as by default it will pick &lt;code&gt;linux/amd64&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note the property &lt;code&gt;quarkus.native.container-build=true&lt;/code&gt;, which instructs Quarkus to use a container image to build the native executable, avoiding the need for GraalVM installation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run the container image with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;$ docker run -it \
  -p8080:8080 \
  -e QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://docker.for.mac.localhost/rest-crud \
  clement/virtual-threads-demos-crud-example:1.0.0-SNAPSHOT&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the same configuration trick for the database connection, and replace &lt;code&gt;clement&lt;/code&gt; with your username.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;pushing-the-container-image&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pushing-the-container-image&quot;&gt;&lt;/a&gt;Pushing the Container Image&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus can push the container image to a registry.
To push to the GitHub container repository, use these properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.container-image.registry=ghcr.io
quarkus.container-image.group=cescoffier
quarkus.container-image.username=cescoffier
quarkus.container-image.password=${GITHUB_TOKEN}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; environment variable configures the GitHub token, which must have permission to create packages. Push the container image using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;$ mvn clean package -DskipTests -Dquarkus.container-image.push=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Append &lt;code&gt;-Dnative&lt;/code&gt; for native images.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Multi-architecture container images can be created using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;$ mvn clean package -DskipTests -Dquarkus.container-image.push=true -Dquarkus.jib.platforms=linux/amd64,linux/arm64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This option is not applicable for native executables, howver, it is very convenient for JVM applications as you can then use the same container image on different platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog post demonstrated how to containerize a virtual thread application using Quarkus and the Jib container image extension. Both JVM applications and native executables were covered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attentive readers would have seen that nothing is different from a regular application.
Quarkus handles all the complexity, selecting the right base image and configuring the native image build process to use the right flags.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/virtual-threads-6/
            </guid>
            
            
            
            <author>Clement Escoffier (https://twitter.com/clementplop)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.6.3 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-6-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.6.3, our third maintenance release for the 3.6 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3.6.2 had an extremely short lifetime due to a bug caught early by our community (thanks to those who reported the issue!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.6.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.6.3, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To migrate from 3.5, please refer to &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;our migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;3.4&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;3.5&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.6.2&quot;&gt;the full changelog of 3.6.2&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.6.3&quot;&gt;3.6.3&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-6-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #39 - December</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-39/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Large language models (LLMs) are reshaping the world of software, altering the way we interact with users and develop business logic. See how to use the just released quarkus-langchain4j 0.1 extension to integrate LLMs in Quarkus applications. Additionally, learn how Quarkus integrates the virtual thread for Java developers to run blocking applications with a single @RunOnVirtualThread annotation in &quot;Quarkus 3: The Future of Java Microservices With Virtual Threads and Beyond&quot; by Daniel Oh. He also wrote another great article, &quot;Demystifying Virtual Thread Performance: Unveiling the Truth Beyond the Buzz&quot; where you can learn how virtual threads can provide high enough performance and resource efficiency based on your concurrency goal but also let you have a simple development model. Read &quot;Revolutionize Data Management: Unleashing the Potential of Quarkus and HarperDB for Maximum Efficiency&quot; by the Java Code Geeks to explore the seamless integration of Quarkus with HarperDB, a powerful and high-performance database solution. Build a MongoDB-powered RESTful app with Quarkus and Eclipse JNoSQL: generate, configure, create entities, implement services, and expose API by reading &quot;Building a MongoDB-Powered RESTful Application With Quarkus and Eclipse JNoSQL&quot; by Otavio Santana.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/38/&quot;&gt;Newsletter #39: December&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-39/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.6.1 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-6-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.6.1, our first maintenance release for the 3.6 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.6.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.6.1, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To migrate from 3.5, please refer to &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;our migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;3.4&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;3.5&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.6.1&quot;&gt;the full changelog of 3.6.1 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-6-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Testing Quarkus with Citrus</title>
            <link>
                https://quarkus.io/blog/testing-quarkus-with-citrus/
            </link>
            <description>
                &lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/citrus/citrus-quarkus.png&quot; alt=&quot;Citrus &amp;amp; Quarkus&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post shows how to combine Quarkus with the &lt;a href=&quot;https://citrusframework.org&quot;&gt;Citrus&lt;/a&gt; test framework in order to write automated tests for event-driven applications.
&lt;a href=&quot;https://citrusframework.org&quot;&gt;Citrus&lt;/a&gt; is an Open Source Java test framework focusing on messaging and integration testing in general.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Developers can easily empower the &lt;strong&gt;@QuarkusTest&lt;/strong&gt; with Citrus capabilities in order to produce and consume events during the test.
As a result the test is able to interact with the Quarkus event-driven application by exchanging events and messages with real messaging communication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introducing-the-demo-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introducing-the-demo-application&quot;&gt;&lt;/a&gt;Introducing the demo application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post we use a Quarkus demo application called &lt;code&gt;food-market&lt;/code&gt;.
You can find the demo application code and all Citrus tests in &lt;a href=&quot;https://github.com/citrusframework/citrus-samples/tree/main/demo/sample-quarkus&quot;&gt;this GitHub code repository&lt;/a&gt;.
The Quarkus application connects to Kafka streams as an event-driven application that produces and consumes various events (e.g. bookings, supplies, shipping events).
The processed events and their individual status are stored in a PostgreSQL database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/citrus/food-market-demo-application.png&quot; alt=&quot;Food Market App&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The food-market application matches incoming &lt;code&gt;booking&lt;/code&gt; and &lt;code&gt;supply&lt;/code&gt; events and produces &lt;code&gt;shipping&lt;/code&gt; and &lt;code&gt;booking-completed&lt;/code&gt; events accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each event references a product and specifies an amount as well as a price in a simple Json object structure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{ &quot;client&quot;: &quot;citrus-test&quot;, &quot;product&quot;: &quot;Pineapple&quot;, &quot;amount&quot;:  100, &quot;price&quot;:  0.99 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clients create the &lt;code&gt;booking&lt;/code&gt; events and at the same time suppliers will add their individual &lt;code&gt;supply&lt;/code&gt; events.
The Quarkus food-market application consumes both event types and finds matching bookings and supplies.
Once a booking and a supply do match in certain criteria the application produces &lt;code&gt;booking-completed&lt;/code&gt; and &lt;code&gt;shipping&lt;/code&gt; events as a result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least the booking client gets informed via email about the completed booking status.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a fully automated integration test we want to verify all events and their processing using real messaging communication with Kafka streams and database persistence.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing-the-application-with-citrus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#testing-the-application-with-citrus&quot;&gt;&lt;/a&gt;Testing the application with Citrus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus application connects to different infrastructure (Kafka, PostgreSQL, Mail SMTP).
The automated integration test should verify the message communication, the event processing and connectivity to all components.
We will use the Citrus test framework as it provides the complete toolset for testing this kind of event-driven message-based solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first thing to do is to add Citrus to the Quarkus project.
The most convenient way is to import the &lt;code&gt;citrus-bom&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Citrus BOM&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependencyManagement&amp;gt;
    &amp;lt;dependencies&amp;gt;
      &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.citrusframework&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;citrus-bom&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${citrus.version}&amp;lt;/version&amp;gt;
        &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
        &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
      &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
  &amp;lt;/dependencyManagement&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;citrus-quarkus&lt;/code&gt; extension provides a special &lt;code&gt;@QuarkusTest&lt;/code&gt; resource implementation that enables us to combine Citrus with a Quarkus test.
So let&amp;#8217;s add this extension as a test scoped dependency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Citrus Quarkus extension&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.citrusframework&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;citrus-quarkus&amp;lt;/artifactId&amp;gt;
  &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, we need to include some other Citrus modules because we want to exchange data via Kafka and connect to the PostgreSQL database as part of the test.
Citrus is very modular. This means you can choose from a wide range of modules each of them adding specific testing capabilities to your project (e.g. &lt;code&gt;citrus-kafka&lt;/code&gt;, &lt;code&gt;citrus-sql&lt;/code&gt;, &lt;code&gt;citrus-validation-json&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this sample project we include the following Citrus modules as test scoped dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;citrus-quarkus&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;citrus-kafka&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;citrus-validation-json&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;citrus-sql&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;citrus-mail&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This completes the setup of all required Citrus modules.
Now we can move on to writing an automated integration test in order to verify the Quarkus event-driven application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;writing-citrus-tests-on-top-of-quarkustest&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#writing-citrus-tests-on-top-of-quarkustest&quot;&gt;&lt;/a&gt;Writing Citrus tests on top of QuarkusTest&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We want to write an automated test that makes sure that all inbound events (&lt;code&gt;booking&lt;/code&gt; and &lt;code&gt;supply&lt;/code&gt;) are being processed properly and that the resulting outbound  events (&lt;code&gt;booking-completed&lt;/code&gt; and &lt;code&gt;shipping&lt;/code&gt;) are being produced as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/citrus/citrus-demo-test-setup.png&quot; alt=&quot;Citrus test setup&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Citrus as a test framework will act as all surrounding components producing client events and verifying resulting outbound events.
Also, Citrus will have a look into the database in order to verify the persisted domain model objects.
Later on in a more advanced test scenario Citrus will also receive and verify the mail message content that is sent by the food-market Quarkus application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For now let&amp;#8217;s start with a normal Quarkus test.
The test needs to start the Quarkus application and also needs to prepare some infrastructure such as the database and the Kafka streams message broker. Fortunately Quarkus dev services provides the awesome testing capability to automatically start Testcontainers that represent the required infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The test is annotated with the &lt;code&gt;@QuarkusTest&lt;/code&gt; annotation.
It enables the Quarkus dev services test capabilities and takes care of setting everything up for you.
The test itself is an arbitrary JUnit Jupiter unit test, so you can start this test from your Java IDE or as part of the Maven test lifecycle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let&amp;#8217;s add Citrus to the picture.
With the Citrus Quarkus extension that we have added to the Maven project in the previous section we can now enable the Citrus capabilities for the test.
Just add the &lt;code&gt;@CitrusSupport&lt;/code&gt; annotation to the test class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This annotation enables the Citrus capabilities for the Quarkus test.
Citrus will now participate in the Quarkus test lifecycle which enables you to inject specific Citrus resources such as endpoints as well as the Citrus test runner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Citrus enabled Quarkus test&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@QuarkusTest
@CitrusSupport
class FoodMarketApplicationTest {

    private final KafkaEndpoint bookings = kafka()
            .asynchronous()
            .topic(&quot;bookings&quot;)
            .build();

    @CitrusResource
    private TestCaseRunner t;

    @Inject
    ObjectMapper mapper;

    @Test
    void shouldProcessEvents() {
        Product product = new Product(&quot;Pineapple&quot;);

        Booking booking = new Booking(&quot;citrus-test&quot;, product, 100, 0.99D);
        t.when(send()
                .endpoint(bookings)
                .message().body(marshal(booking, mapper)));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Citrus enabled test uses additional resources such as the &lt;code&gt;KafkaEndpoint&lt;/code&gt; named bookings.
The &lt;code&gt;KafkaEndpoint&lt;/code&gt; component comes with the &lt;code&gt;citrus-kafka&lt;/code&gt; module and allows us to interact with Kafka streams by sending and receiving events to a topic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Citrus &lt;code&gt;TestCaseRunner&lt;/code&gt; resource represents the entrance to the Citrus Java domain specific testing language.
This allows us to run any Citrus test action (e.g. send/receive messages, verify data in an SQL database) during the test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See this sample code to send a message to the Kafka streams topic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Send booking event&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;Product product = new Product(&quot;Pineapple&quot;);

Booking booking = new Booking(&quot;citrus-test&quot;, product, 100, 0.99D);
t.when(send()
    .endpoint(bookings)
    .message().body(marshal(booking, mapper)));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The injected Citrus &lt;code&gt;TestCaseRunner&lt;/code&gt; is able to use a Gherkin &lt;code&gt;Given-When-Then&lt;/code&gt; syntax and executes Citrus test operations.
This first test activity references the KafkaEndpoint &lt;code&gt;bookings&lt;/code&gt; in a send operation.
The test is able to use domain model objects (&lt;code&gt;Product&lt;/code&gt; and &lt;code&gt;Booking&lt;/code&gt;) as message body.
The send operation properly serializes the domain model objects to Json with the injected &lt;code&gt;ObjectMapper&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You can also use the &lt;code&gt;@QuarkusIntegrationTest&lt;/code&gt; annotation in order to start the demo application in a separate JVM. This separates the test code from the application and usually binds the test to the integration-test phase in Maven. Please be aware that an integration test is not able to inject application resources such as ObjectMapper or DataSource. The good news is that you can use the very same Citrus extension also with the &lt;code&gt;@QuarkusIntegrationTest&lt;/code&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is basically how you can combine Citrus capabilities with Quarkus test dev services in an automated integration test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The rest of the story is quite easy.
In the same way as sending the booking event we can now also send a matching &lt;code&gt;supply&lt;/code&gt; event.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Send supply event&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;Supply supply = new Supply(product, 100, 0.99D);
t.then(send()
    .endpoint(supplies)
    .message().body(marshal(supply)));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The test now has produced a booking and a matching supply event.
This should trigger the food-market application to produce respective &lt;code&gt;booking-completed&lt;/code&gt; and &lt;code&gt;shipping&lt;/code&gt; events.
As a next step in the test we should receive and verify these events with Citrus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Receive and verify events&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;class FoodMarketApplicationTest {

    // ... Kafka endpoints defined here

    @Test
    void shouldProcessEvents() {
        Product product = new Product(&quot;Pineapple&quot;);

        Booking booking = new Booking(&quot;citrus-test&quot;, product, 100, 0.99D);
        t.when(send()
            .endpoint(bookings)
            .message().body(marshal(booking, mapper)));

        // ... also send supply events

        ShippingEvent shippingEvent = new ShippingEvent(booking.getClient(), product.getName(), booking.getAmount(), &quot;@ignore@&quot;);
        t.then(receive()
            .endpoint(shipping)
            .message().body(marshal(shippingEvent, mapper))
        );
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Citrus is able to perform powerful message validation when receiving the events.
This is why we have added the &lt;code&gt;citrus-validation-json&lt;/code&gt; module in the very beginning.
The Json message validator in Citrus will compare the received Json object with an expected Json template and make sure that all fields and properties do match as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The test creates the expected &lt;code&gt;shippingEvent&lt;/code&gt; Json object which uses properties like the &lt;code&gt;client&lt;/code&gt;, &lt;code&gt;product&lt;/code&gt; and the &lt;code&gt;amount&lt;/code&gt;.
The received event must match these expected values in order to pass the test.
Unfortunately we are not able to verify the &lt;code&gt;address&lt;/code&gt; field because it has been generated by the Quarkus application.
This is why the &lt;code&gt;address&lt;/code&gt; gets ignored during the validation by using the &lt;code&gt;@ignored@&lt;/code&gt; Citrus validation expression as an expected value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Citrus Json message validator is quite powerful and will now compare the received shipping event with the expected Json object.
All given Json properties get verified and the test will fail when there is a mismatch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Received Json&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{ &quot;client&quot;:  &quot;citrus-test&quot;, &quot;product&quot;: &quot;Pineapple&quot;, &quot;amount&quot;: 100, &quot;address&quot;: &quot;10556 Citrus Blvd.&quot; }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Control Json&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{ &quot;client&quot;:  &quot;citrus-test&quot;, &quot;product&quot;: &quot;Pineapple&quot;, &quot;amount&quot;: 100, &quot;address&quot;: &quot;@ignore@&quot; }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use ignore expressions, use validation matchers, functions and test variables in the expected template.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Control Json&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{ &quot;client&quot;:  &quot;${clientName}&quot;, &quot;product&quot;: &quot;@matches(Pineapple|Strawberry|Banana)@&quot;, &quot;amount&quot;: &quot;@isNumber()@&quot;, &quot;address&quot;: &quot;@ignore@&quot; }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This completes the first test with many events being exchanged with the application under test.
Now let&amp;#8217;s run the test.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;running-the-citrus-tests&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-the-citrus-tests&quot;&gt;&lt;/a&gt;Running the Citrus tests&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus test framework in the example uses JUnit Jupiter as a test driver.
This means you can run the tests just like any other JUnit test from your Java IDE or with Maven for instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;./mvnw test&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The test is now run with the Maven test lifecycle.
The &lt;code&gt;@QuarkusTest&lt;/code&gt; dev services will start the application and prepare the infrastructure with Testcontainers.
Then Citrus will produce the events and verify the outcome with powerful Json validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this first test we made sure that the application is able to process the incoming events and that the resulting events are produced as expected.
Now let&amp;#8217;s move on to more advanced tests including the database and a mail server SMTP communication.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;verify-stored-data-with-sql&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#verify-stored-data-with-sql&quot;&gt;&lt;/a&gt;Verify stored data with SQL&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When testing distributed event-driven applications the timing of events is an essential ingredient to success.
Each test scenario is keen to verify a specific application behavior and the correct timing of events is key to triggering and verifying this behavior.
Also timing is very important to avoid running into flaky tests where racing conditions may influence the test result on slower machines (e.g. CI jobs).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an example assume the test needs to create a new product first and then sends a new booking event referencing this newly added product.
The test needs to wait for the product event to be processed completely before sending the booking event.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Citrus we are able to add this waiting state very easily.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Wait for object to be created in persistence layer&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;Product product = new Product(&quot;Watermelon&quot;);
t.when(send()
    .endpoint(products)
    .message().body(marshal(product)));

t.then(repeatOnError()
    .condition((i, context) -&amp;gt; i &amp;gt; 25)
    .autoSleep(500)
    .actions(
        sql().dataSource(dataSource)
            .query()
            .statement(&quot;select count(id) as found from product where product.name=&apos;%s&apos;&quot;
                    .formatted(product.getName()))
            .validate(&quot;found&quot;, &quot;1&quot;))
);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the product event has been sent we use the &lt;code&gt;repeatOnError()&lt;/code&gt; test action.
In combination with an &lt;code&gt;autoSleep&lt;/code&gt; and a max retry count setting the action periodically polls the database for the created product.
This makes sure that we do not continue with the test until the new product has been properly stored to the database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The database interaction in Citrus comes with the &lt;code&gt;citrus-sql&lt;/code&gt; module and enables you to verify any SQL result set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Quarkus is able to inject the &lt;code&gt;dataSource&lt;/code&gt; that is being used to connect to the PostgreSQL database. This also works when Quarkus uses the PostgreSQL Testcontainers infrastructure in the test. Just use the &lt;code&gt;@Inject&lt;/code&gt; annotation in your test and reference the datasource in the Citrus &lt;code&gt;sql()&lt;/code&gt; test action.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You may introduce test behaviors for common Citrus test logic such as waiting for a domain model object to be persisted in the database. In general a test behavior encapsulates a set of Citrus test actions to a reusable entity that you can reference many times from your tests.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Citrus test behavior&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class WaitForProductCreated implements TestBehavior {

    private final Product product;
    private final DataSource dataSource;

    public WaitForProductCreated(Product product, DataSource dataSource) {
        this.product = product;
        this.dataSource = dataSource;
    }

    @Override
    public void apply(TestActionRunner t) {
        t.run(repeatOnError()
            .condition((i, context) -&amp;gt; i &amp;gt; 25)
            .autoSleep(500)
            .actions(
                sql().dataSource(dataSource)
                    .query()
                    .statement(&quot;select count(id) as found from product where product.name=&apos;%s&apos;&quot;
                            .formatted(product.getName()))
                    .validate(&quot;found&quot;, &quot;1&quot;))
        );
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a test you can apply the test behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Apply test behaviors&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;Product product = new Product(&quot;Watermelon&quot;);
t.when(send()
    .endpoint(products)
    .message().body(marshal(product)));

t.then(t.applyBehavior(new WaitForProductCreated(product, dataSource)));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The ability to look into the database in order to check on the persisted entities is quite powerful as it allows us to fully control the test workflow.
We could also use the Citrus SQL result set verification in the test to verify a booking status.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Verify booking status completed&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;t.then(sql().dataSource(dataSource)
        .query()
        .statement(&quot;select status from booking where booking.id=&apos;${bookingId}&apos;&quot;)
        .validate(&quot;status&quot;, &quot;COMPLETED&quot;)
);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This verifies that the booking with the given id has the status &lt;code&gt;COMPLETED&lt;/code&gt;.
The SQL result set validation in Citrus is able to handle complex column sets with multiple rows.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;verify-the-mail-server-interaction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#verify-the-mail-server-interaction&quot;&gt;&lt;/a&gt;Verify the mail server interaction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The food-market Quarkus application under test may inform the client about a completed booking via email.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Mail content&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-text hljs&quot; data-lang=&quot;text&quot;&gt;Subject: Booking completed!

Hey citrus-client, your booking Pineapple has been completed!&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Citrus test is able to verify this particular mail content by starting an SMTP mail server that will receive that mail message and verify its content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Quarkus we can use the &lt;code&gt;quarkus-mailer&lt;/code&gt; extension to send mails via SMTP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Quarkus mail service&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Singleton
public class MailService {

    @Inject
    ReactiveMailer mailer;

    public void send(Booking booking) {
        if (Booking.Status.COMPLETED != booking.getStatus()) {
            return;
        }

        mailer.send(
            Mail.withText(&quot;%s@quarkus.io&quot;.formatted(booking.getClient()),
                &quot;Booking completed!&quot;,
                &quot;Hey %s, your booking %s has been completed.&quot;.formatted(booking.getClient(), booking.getProduct().getName())
            )
        ).subscribe().with(success -&amp;gt; {
            // handle mail sent
        }, failure -&amp;gt; {
            // handle mail error
        });
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the test Citrus starts an SMTP mail server that is able to accept the mail messages sent by Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Citrus mail server component&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@BindToRegistry
private MailServer mailServer = mail().server()
            .port(2222)
            .knownUsers(Collections.singletonList(&quot;foodmarket@quarkus.io:foodmarket:secr3t&quot;))
            .autoAccept(true)
            .autoStart(true)
            .build();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s tell Quarkus to connect to this Citrus mail server during the test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Quarkus mailer configuration&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.mailer.mock=false
quarkus.mailer.own-host-name=localhost
quarkus.mailer.from=foodmarket@quarkus.io
quarkus.mailer.host=localhost
quarkus.mailer.port=2222

quarkus.mailer.username=foodmarket
quarkus.mailer.password=secr3t&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this setup we can now add a test action that receives and verifies the mail message sent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Verify mail message sent&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;t.variable(&quot;client&quot;, &quot;citrus-test&quot;);
t.variable(&quot;product&quot;, product.getName());

t.run(receive()
    .endpoint(mailServer)
    .message(MailMessage.request(&quot;foodmarket@quarkus.io&quot;, &quot;${client}@quarkus.io&quot;, &quot;Booking completed!&quot;)
            .body(&quot;Hey ${client}, your booking ${product} has been completed.&quot;, &quot;text/plain&quot;))
);

t.run(send()
    .endpoint(mailServer)
    .message(MailMessage.response(250, &quot;Ok&quot;))
);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The expected mail content uses some test variables &lt;code&gt;${client}&lt;/code&gt; and &lt;code&gt;${product}&lt;/code&gt;.
You may set these test variables in Citrus accordingly so these placeholders get resolved before the validation is performed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The mail server responds with a code and a text according to the SMTP protocol.
In the success case this is a &lt;code&gt;250&lt;/code&gt; &lt;code&gt;Ok&lt;/code&gt; response.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Again you can introduce a Citrus test behavior that covers the booking completed mail message verification.
Many tests may apply this behavior in their test logic then.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another interesting point about the mail server interaction is that the Citrus mail server component is also able to simulate a mail server error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Simulate mail server error&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;t.run(receive()
    .endpoint(mailServer)
    .message(MailMessage.request(&quot;foodmarket@quarkus.io&quot;, &quot;${client}@quarkus.io&quot;, &quot;Booking completed!&quot;)
            .body(&quot;Hey ${client}, your booking ${product} has been completed.&quot;, &quot;text/plain&quot;))
);

t.run(send()
    .endpoint(mailServer)
    .message(MailMessage.response(443, &quot;Failed!&quot;))
);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time the Citrus mail server explicitly responds with a &lt;code&gt;443&lt;/code&gt; &lt;code&gt;Failed!&lt;/code&gt; error and the Quarkus application needs to handle this error accordingly.
Verifying error scenarios in automated integration tests is very important and helps us to develop robust applications.
It is great to have the opportunity to trigger these error scenarios with Citrus in an automated test.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post we have seen how to combine the Citrus test framework with Quarkus test dev services in order to perform automated integration testing of event-driven applications.
The test is able to produce/consume events on Kafka streams and verifies the Quarkus application accordingly by verifying the Json data and the persisted entities in the database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Citrus as a framework provides many modules each of them providing endpoints (client and server) for straight forward messaging interaction during an integration test (e.g. Kafka, JMS, FTP, Http, SOAP, Mail, &amp;#8230;&amp;#8203;).
The message validation capabilities allow us to verify the exchanged message content with different formats (e.g. Json, XML, plaintext).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the Citrus project has been around for quite some time the Citrus Quarkus extension is a new addition in the most recent Citrus version 4.0.
As always, your feedback is much appreciated!
Please give it a try and let us know what you think about this approach of automated integration testing with the combination of Citrus and Quarkus testing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/testing-quarkus-with-citrus/
            </guid>
            
            
            
            <author>Christoph Deppisch (https://twitter.com/freaky_styley)</author>
            
        </item>
        
        <item>
            <title>Java 17 will be the minimum version for Quarkus 3.7</title>
            <link>
                https://quarkus.io/blog/java-17/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today we are anouncing that Quarkus 3.7 will move Quarkus to use Java 17 as the minimum JDK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we started Quarkus 3.0, &lt;a href=&quot;https://quarkus.io/blog/road-to-quarkus-3/#java-target&quot;&gt;we stayed on Java 11&lt;/a&gt;. The feedback we got was that moving to Jakarta EE 10 was for many easier than to also move the underlying JDK. We wanted to give the ecosystem time to catch up and make sure we had a good story for users that needed to stay on Java 11.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 3.0 release, we supported Java 11 for Quarkus core, and we &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/#java-11-deprecated&quot;&gt;marked Java 11 as deprecated&lt;/a&gt;. It should be noted that parts of the platform, especially the Camel Extensions for Quarkus, already require Java 17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today we are taking the step to move Quarkus core to Java 17 as the minimum JDK for Quarkus 3.7 and onwards.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that Quarkus 3.7 will require Java 17 to build and run all Quarkus applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below are some of the reasons for this decision and what it means for you as a Quarkus user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;everyone-is-using-java-11-you-cannot-do-this&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#everyone-is-using-java-11-you-cannot-do-this&quot;&gt;&lt;/a&gt;Everyone is using Java 11 - you cannot do this!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We know that many users are still using Java 11 and we are not forcing you to move to Java 17. We are just making it the minimum version for Quarkus 3.7 and onwards.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That said - the &lt;a href=&quot;https://quarkus.io/usage/&quot;&gt;usage data development builds&lt;/a&gt; in the last 30 days shows less than 8% using Java 11 for Quarkus Development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/javaversions-used-by-32plus.png&quot; alt=&quot;javaversions used by 32plus&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We expect the Java 11 number to be higher in production but the trend is clear - Java 11 usage is low and declining.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you like to help us get more accurate data for future, then please consider contributring anonymous build time data - see &lt;a href=&quot;https://quarkus.io/usage/&quot;&gt;quarkus.io/usage&lt;/a&gt; for details.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;i-cannot-move-to-java-17-yet-what-should-i-do&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#i-cannot-move-to-java-17-yet-what-should-i-do&quot;&gt;&lt;/a&gt;I cannot move to Java 17 yet, what should I do?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you cannot move to Java 17 yet, then you can continue to use Quarkus 3.6, but we recommend you consider to use the Quarkus 3.2 LTS stream as that is the version that will get updates and fixes for the longest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Be mindful though that Java 11 itself is rapidly heading towards going out of full support. Example Red Hat&amp;#8217;s full &lt;a href=&quot;https://access.redhat.com/articles/1299013#OpenJDK_Life_Cycle&quot;&gt;Java 11 support ends in October 2024&lt;/a&gt; and &lt;a href=&quot;https://www.oracle.com/java/technologies/java-se-support-roadmap.html&quot;&gt;Oracle ended Premier support in September 2023&lt;/a&gt;. Thus we highly recommend you start planning your migration to Java 17 or even Java 21 as soon as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;im-already-using-java-17-what-does-this-mean-for-me&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#im-already-using-java-17-what-does-this-mean-for-me&quot;&gt;&lt;/a&gt;I&amp;#8217;m already using Java 17, what does this mean for me?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are already using Java 17 then this change will not affect you. You can continue to use Quarkus using records, multiline strings, faster runtime performance and all the other cool stuff in Java 17.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-java-17-and-not-java-21&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-java-17-and-not-java-21&quot;&gt;&lt;/a&gt;Why Java 17 and not Java 21?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus supports Java 21 already today. The most well known feature of Java 21 is probably &lt;a href=&quot;https://quarkus.io/blog/virtual-thread-1/&quot;&gt;virtual threads&lt;/a&gt; and we supported that already when it was made preview in Java 19. We mainly recommend Java 21 because of all the improvements made that makes any Java application faster and more efficient - with or without Virtual Threads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reality is though that companies and organizations today are still in the process of migrating to Java 17 and we want to make sure that we are not forcing them to also migrate to Java 21 at the same time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But please do use Quarkus with Java 21 if you can, it is awesome!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;im-a-quarkus-extension-developer-what-does-this-mean-for-me&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#im-a-quarkus-extension-developer-what-does-this-mean-for-me&quot;&gt;&lt;/a&gt;I&amp;#8217;m a Quarkus extension developer, what does this mean for me?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus extension developer then you should already be testing your extension with Java 17. If you are not, then you should start doing so now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are part of the &lt;a href=&quot;https://quarkiverse.io&quot;&gt;Quarkiverse extension ecosystem&lt;/a&gt; then we already recommend at time of Quarkus 3.2 to have a branch targeting 3.2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you already have that, things should be fairly straightforward.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Build your extension for Quarkus 3.2 against Java 11 and have your main branch using Java 17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some extensions may still be able to release on Java 11 but they will then target Quarkus 3.2 or 3.6 - extra care should be taken to make sure that the extension is continuing to work on Quarkus 3.7 and onwards.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are things like Quarkus ecosystem CI which we will want to update to target multiple branches - if interested in that and especially helping out on making that work, then please follow and/or post on the &lt;a href=&quot;https://groups.google.com/g/quarkus-dev&quot;&gt;quarkus-dev mailing list&lt;/a&gt; or in the dev channel on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus-does-not-need-to-be-built-with-java-17-thus-why-require-it&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-does-not-need-to-be-built-with-java-17-thus-why-require-it&quot;&gt;&lt;/a&gt;Quarkus does not need to be built with Java 17, thus why require it?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today Quarkus does not use Java 17 features, we deliberatly did it that way so we could support Java 11, Java 17, Java 21 etc. at the same time. We could continue doing so - we don&amp;#8217;t &lt;strong&gt;really&lt;/strong&gt; need records, multiline strings etc. to build Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately we are starting to see dependencies we or other extensions have that are moving to Java 17 and we want to make sure we can support them and users can use them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One particular example coming in 2024 is that JPA 3.2 for Hibernate ORM 7 is requiring Java 17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many more, and thus starting when &lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/37335&quot;&gt;this PR&lt;/a&gt; is merged - Quarkus main will require Java 17 to build and run.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 30 Nov 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/java-17/
            </guid>
            
            
            
            <author>Max Rydahl Andersen (https://twitter.com/maxandersen)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.6.0 released - SSE improvements, OIDC and security-related enhancements</title>
            <link>
                https://quarkus.io/blog/quarkus-3-6-0-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is with great pleasure that we are announcing the release of Quarkus 3.6.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.6 will be the last minor of the year (we will release micros for 3.6 in December though).
Quarkus 3.7 is &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Release-Planning&quot;&gt;planned for the end of January&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Major changes are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Several new features in the REST Client related to SSE handling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many OIDC and general security enhancements (see below for details)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move &lt;code&gt;quarkus-jaeger&lt;/code&gt; and &lt;code&gt;quarkus-smallrye-opentracing&lt;/code&gt; to Quarkiverse&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, this version also comes with bugfixes, performance improvements and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned in the previous minor announcement, we currently maintain two version streams in the community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;3.6: it is the latest and greatest and it introduces new features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3.2: it is our current &lt;a href=&quot;/blog/lts-releases/&quot;&gt;LTS release&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 2.x is not maintained in the community anymore.
If you are using the community version, please upgrade to Quarkus 3.x (either 3.2 LTS or 3.6).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.6, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To migrate from 3.5, please refer to &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.6&quot;&gt;our migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;3.4&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;3.5&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sse-handling-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sse-handling-improvements&quot;&gt;&lt;/a&gt;SSE handling improvements&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SSE handling in the REST Client was significantly improved:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The REST Client can now return the entire SSE event instead of just the data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can easily filter out some particular SSE events with a &lt;code&gt;SseEventFilter&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These new features are fully documented in the &lt;a href=&quot;https://quarkus.io/guides/rest-client-reactive&quot;&gt;REST Client guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;oidc-and-security-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oidc-and-security-improvements&quot;&gt;&lt;/a&gt;OIDC and security improvements&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many enhancements were made to the OIDC and security extensions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Support for dynamic OIDC JWK set resolution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ability to adjust HTTP permissions and roles policies at runtime&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add Discord as well-known OIDC provider&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JPA Security: allow pointing to a named persistence unit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Introduce OidcRequestFilter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make it possible to acquire OIDC SecurityIdentity after HTTP request has completed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also there is now an OIDC client integration for GraphQL clients.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;quarkus-jaeger-and-quarkus-smallrye-opentracing-moved-to-quarkiverse&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-jaeger-and-quarkus-smallrye-opentracing-moved-to-quarkiverse&quot;&gt;&lt;/a&gt;quarkus-jaeger and quarkus-smallrye-opentracing moved to Quarkiverse&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After having been deprecated for a long while, the Jaeger and SmallRye OpenTracing extensions have been retired from the Quarkus Platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is recommended to  migrate your applications to OpenTelemetry and a  &lt;a href=&quot;https://quarkus.io/version/main/guides/telemetry-opentracing-to-otel-tutorial&quot;&gt;tutorial to guide you in this migration is available&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code of the extensions have been moved to the Quarkiverse and can be consumed from there from now on (relocations have been put in place to avoid breaking your builds).
If you want these extensions to continue working in the future, it is recommended to get involved in their development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These extensions are not in the Quarkus Platform BOM anymore and you need to define the version yourself in your build file, together with moving to the new &lt;code&gt;groupId&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Component&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;New groupId&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Current version&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Repository&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Jaeger&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;io.quarkiverse.jaeger&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;1.0.0&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/quarkiverse/quarkus-jaeger&quot; class=&quot;bare&quot;&gt;https://github.com/quarkiverse/quarkus-jaeger&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SmallRye OpenTracing&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;io.quarkiverse.opentracing&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;1.0.0&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/quarkiverse/quarkus-smallrye-opentracing&quot; class=&quot;bare&quot;&gt;https://github.com/quarkiverse/quarkus-smallrye-opentracing&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.6.0.CR1&quot;&gt;3.6.0.CR1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.6.0&quot;&gt;3.6.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;贡献者&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;876 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.6 release, thanks to Ales Justin, Alex Martel, Alexander Schwartz, Alexey Loubyansky, Anastasiia Pushkina, Andrea Peruffo, Andrej Petras, Andy Damevin, asjervanasten, Auri Munoz, barreiro, Bernhard Schuhmann, Bruno Baptista, Bruno Oliveira da Silva, Christian Beikov, Clement Escoffier, David Birks, David Cotton, Davide D&amp;#8217;Alto, Eric Deandrea, Erin Schnabel, Falko Modler, Felix König, Foivos Zakkak, Geoffrey De Smet, George Gastaldi, Georgios Andrianakis, glefloch, Guillaume Smet, hiteshkhatri97, Holly Cummins, Ioannis Canellos, Ivan, Jan Martiska, jeanphi.baconnais, JiriOndrusek, Juan Diego López V, Katia Aresti, kdnakt, Ladislav Thon, Leonor Boga, Loïc Mathieu, Luke Morfill, Marc Nuri, Marco Bungart, Marco Sappé Griot, mariofusco, Mark Swatosh, marko-bekhta, Martin Kouba, Matej Novotny, Max Rydahl Andersen, Melloware, Michal Maléř, Michal Vavřík, Michelle Purcell, Milan Tulek, Nathan Erwin, Nelson Osacky, Ozan Gunalp, Pedro Igor, Peter Palaga, Phillip Krüger, Robert Stupp, Roberto Cortez, Rolfe Dlugy-Hegwer, Roman Ziske, Rostislav Svoboda, Rui Balau, sahuefficy, Said BOUDJELDA, Sanne Grinovero, Scott M Stark, Sergey Beryozkin, Stefan Guilhen, Torben Meyer, wrongwrong, xstefank, Yoann Rodière, and Yoshikazu Nojima.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 29 Nov 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-6-0-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>SmallRye Stork Unwrapped: Exploring New Features and Enhancements</title>
            <link>
                https://quarkus.io/blog/stork-latest-news/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since its initial release in January 2022, Stork has undergone significant development, introducing new features that extended its capabilities and improved developer experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog post takes a deep dive into the evolution of SmallRye Stork beyond its initial release, providing a detailed exploration of its fresh additions.
But first, let&amp;#8217;s describe briefly what Stork can do for you.
SmallRye Stork is a client-side service discovery and selection framework.
It provides out-of-the-box integrations with Kubernetes, Eureka, and Hashicorp Consul, as well as a set of selection strategies, including round-robin, power-of-two-choices and best response time.
But the most noteworthy feature of Stork is its extensibility. You can create your own service selection strategy or plug in your own service discovery mechanism.
If you don&amp;#8217;t know it yet, a good way to get started is to take a look at our &lt;a href=&quot;https://quarkus.io/guides/stork&quot;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, our documentation has also been enhanced, offering comprehensive guides for both seasoned users and those taking their first steps with Stork.
To further support your exploration, there is &lt;a href=&quot;https://www.youtube.com/watch?v=fCNwxPDGt7Q&quot;&gt;a video&lt;/a&gt; and supplementary content that show Stork&amp;#8217;s capabilities in detail, don’t hesitate to check them out.
Don&amp;#8217;t have much time? Don&amp;#8217;t worry, we have the &lt;a href=&quot;https://www.youtube.com/shorts/F4Gd1I1zfjs&quot;&gt;perfect video&lt;/a&gt; to understand Stork in less than 1 minute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the latest added additions we highlight how Stork
continues to reshape the client-side service discovery and selection landscape.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s now have a look at the most interesting additions added to Stork since its initial release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;programmatic-service-definition&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#programmatic-service-definition&quot;&gt;&lt;/a&gt;Programmatic service definition&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Initially, you had to configure Stork in the application configuration. You needed to configure the service discovery and selection (optionally) for each &lt;em&gt;service&lt;/em&gt; you wanted to discover and select.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stork, from the 1.2.0 version, proposes a programmatic API to allow users to define the service discovery and selection configuration through code rather
than through declarative or external configuration files. This means that you can use the full expressive power of Java to explicitly specify new service
definitions and do manual lookup and selection. This is particularly beneficial when the configuration requirements of an application are not known until runtime,
and it provides the ability to adjust settings without restarting the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using the programmatic API of Stork, you can:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Retrieve the singleton &lt;code&gt;Stork&lt;/code&gt; instance. This instance is configured with the set of &lt;code&gt;Services&lt;/code&gt; it manages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Register new service definition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Retrieve the &lt;code&gt;Service&lt;/code&gt; you want to use. Each Service is associated with a name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Retrieve the &lt;code&gt;ServiceInstance&lt;/code&gt;, which will provide the metadata to access the actual instance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following code, we use Stork programmatic API to set up and configure services with different discovery methods and selection strategies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package examples;

import io.smallrye.stork.Stork;
import io.smallrye.stork.api.ServiceDefinition;
import io.smallrye.stork.loadbalancer.random.RandomConfiguration;
import io.smallrye.stork.servicediscovery.consul.ConsulRegistrarConfiguration;
import io.smallrye.stork.servicediscovery.staticlist.StaticConfiguration;
import io.smallrye.stork.servicediscovery.staticlist.StaticRegistrarConfiguration;

public class DefinitionExample {

    public static void example(Stork stork) {
        String example = &quot;localhost:8080, localhost:8081&quot;;

        // A service using a static list of locations as discovery
        // As not set, it defaults to round-robin to select the instance.
        stork.defineIfAbsent(&quot;my-service&quot;,
                ServiceDefinition.of(new StaticConfiguration().withAddressList(example)));

        // Another service using the random selection strategy, instead of round-robin
        stork.defineIfAbsent(&quot;my-second-service&quot;,
                ServiceDefinition.of(new StaticConfiguration().withAddressList(example),
                        new RandomConfiguration()));

        // Another service using the random selection strategy, instead of round-robin
        // and a static service registrar
        stork.defineIfAbsent(&quot;my-second-service&quot;,
                ServiceDefinition.of(new StaticConfiguration().withAddressList(example),
                        new RandomConfiguration(), new StaticRegistrarConfiguration()));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It’s important to note that the choice between programmatic and declarative configuration often depends on the specific requirements and constraints of
your application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;service-discovery-and-selection-strategies-provided-as-cdi-beans&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#service-discovery-and-selection-strategies-provided-as-cdi-beans&quot;&gt;&lt;/a&gt;Service discovery and selection strategies provided as CDI beans.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second noticeable improvement is the integration with CDI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Users may prefer using a framework that leverages CDI mechanism to easily manage and inject dependencies and have a more testable and maintainable code.
Stork can now do that. Starting from the 2.0.1 release, users can use the service discovery and load balancer as beans.
For that, it looks for CDI beans during the initialization in addition to the SPI providers.
It is worth mentioning that this enhancement also contributes to improving the Quarkus experience.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-service-discovery-approaches-added&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-service-discovery-approaches-added&quot;&gt;&lt;/a&gt;New service discovery approaches added.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are happy to announce a few added service discovery strategies using DNS and Knative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the Knative service discovery, Smallrye Stork introduces seamless service discovery through its serverless infrastructure, even when there are no &apos;pod&apos; running.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Stork Knative service discovery implementation is very similar to the Kubernetes one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stork will ask for &lt;a href=&quot;https://knative.dev/docs/serving/reference/serving-api/#serving.knative.dev/v1.Service&quot;&gt;Knative services&lt;/a&gt; to the cluster instead of vanilla &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/#service-resource&quot;&gt;Kubernetes services&lt;/a&gt; used by the Kubernetes implementation.
Again, to do so, Stork uses &lt;a href=&quot;https://github.com/fabric8io/kubernetes-client/blob/master/extensions/knative/client/src/main/java/io/fabric8/knative/client/KnativeClient.java&quot;&gt;Fabric 8 Knative Client&lt;/a&gt; which is just an extension of Fabric8 Kubernetes Client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The DNS-based service discovery is also here to stay. When a service has registered one or more instances in a Domain Name System (DNS) server,
Stork will be able to discover them by querying the DNS. This strategy is simple and widely used, so Stork could not fail to implement it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-sticky-service-selection-strategy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-sticky-service-selection-strategy&quot;&gt;&lt;/a&gt;New sticky service selection strategy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Stork load balancer family has been extended with a new one: the sticky service selection implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The sticky service selection implemented by Stork refers to a strategy where a client &quot;sticks&quot; to a particular instance of a service until it fails,
then it selects another one. It is also possible to configure a backoff period for specifying how long a failing service instance should be retried.
This can be useful in scenarios where maintaining a consistent connection to the same instance is beneficial, such as when dealing with sessions or
stateful applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;enhanced-service-instances-cache-expiration-policy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#enhanced-service-instances-cache-expiration-policy&quot;&gt;&lt;/a&gt;Enhanced service instances cache expiration policy.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since almost the first release, Stork has provided in-memory caching of discovered instances by extending the &lt;code&gt;CachingServiceDiscovery&lt;/code&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As of version 1.3, this capability has been expanded to allow the retention of the cached service instances for a specified duration and the implementation of custom business logic for decision-making and data expiration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This enhancement was driven by the specific requirements of Kubernetes service discovery as contacting the cluster too frequently can result in performance
problems. So, out of the box, Stork Kubernetes service discovery now comes with a tailored cache expiration strategy to keep service instances until an event occurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you would like to do so for your custom service discovery implementations, you need:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Extend the CachingServiceDiscovery as mentioned above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement the &lt;code&gt;cache&lt;/code&gt; method where the expiration strategy is defined.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invalidate the cache when the expiration condition evaluates to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Look at the example bellow:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;package examples;

import io.smallrye.mutiny.Uni;
import io.smallrye.stork.api.ServiceInstance;
import io.smallrye.stork.impl.CachingServiceDiscovery;
import io.smallrye.stork.impl.DefaultServiceInstance;
import io.smallrye.stork.utils.ServiceInstanceIds;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;

public class CustomExpirationCachedAcmeServiceDiscovery extends CachingServiceDiscovery {

    private final String host;
    private final int port;

    private AtomicBoolean invalidated = new AtomicBoolean();

    public CustomExpirationCachedAcmeServiceDiscovery(CachedAcmeConfiguration configuration) {
        super(configuration.getRefreshPeriod()); // (1)
        this.host = configuration.getHost();
        this.port = Integer.parseInt(configuration.getPort());
    }

    @Override
    public Uni&amp;lt;List&amp;lt;ServiceInstance&amp;gt;&amp;gt; fetchNewServiceInstances(List&amp;lt;ServiceInstance&amp;gt; previousInstances) {
        // Retrieve services...
        DefaultServiceInstance instance =
                new DefaultServiceInstance(ServiceInstanceIds.next(), host, port, false);
        return Uni.createFrom().item(() -&amp;gt; Collections.singletonList(instance));
    }

    @Override
    public Uni&amp;lt;List&amp;lt;ServiceInstance&amp;gt;&amp;gt; cache(Uni&amp;lt;List&amp;lt;ServiceInstance&amp;gt;&amp;gt; uni) {
        return uni.memoize().until(() -&amp;gt; invalidated.get());
    }

    //command-based cache invalidation: user triggers the action to invalidate the cache.
    public void invalidate() {
        invalidated.set(true);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can check the &lt;a href=&quot;https://github.com/smallrye/smallrye-stork/blob/main/service-discovery/kubernetes/src/main/java/io/smallrye/stork/servicediscovery/kubernetes/KubernetesServiceDiscovery.java&quot;&gt;Kubernetes Service Discovery code&lt;/a&gt; for further details about an event-based invalidation example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;observability&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#observability&quot;&gt;&lt;/a&gt;可观察性&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Observability refers to the ability to understand and gain insights into the internal workings and behaviors of a system through the analysis of its external outputs or observations. Stork observability support has been integrated in Quarkus 3.6.0 release (release planned for next week). This addition brings automated observability to the forefront of service discovery and selection providing a window into how Stork behaves in real-time. Now you can effortlessly monitor metrics such as service discovery and selection durations and error rates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re leveraging Stork within your Quarkus application, now, you can easily check and analyze metrics such as service discovery and selection
response times and errors directly in Prometheus. Check the &lt;a href=&quot;https://quarkus.io/version/main/guides/stork-reference#configure-stork-observability&quot;&gt;Stork reference guide&lt;/a&gt; for details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In conclusion, all these advancements in Stork signify our commitment to enhancing your experience with service discovery and selection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay tuned for more updates. Your feedback is invaluable to us so share it and contribute to making Stork even better.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 23 Nov 2023 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/stork-latest-news/
            </guid>
            
            
            
            <author>Aurea Munoz (https://twitter.com/auritamh)</author>
            
        </item>
        
    </channel>
</rss>
